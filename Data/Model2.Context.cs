//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AccountingKernelEntities10 : DbContext
    {
        public AccountingKernelEntities10()
            : base("name=AccountingKernelEntities10")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<GoodiesGroupsView> GoodiesGroupsViews { get; set; }
        public DbSet<AccountingArticle> AccountingArticles { get; set; }
        public DbSet<AccountingDocument> AccountingDocuments { get; set; }
        public DbSet<AccountingInterface> AccountingInterfaces { get; set; }
        public DbSet<AccountingMoein> AccountingMoeins { get; set; }
        public DbSet<AccountingMoeinCode> AccountingMoeinCodes { get; set; }
        public DbSet<AccountingMoeinDetail> AccountingMoeinDetails { get; set; }
        public DbSet<AccountingMoeinStructureDefine> AccountingMoeinStructureDefines { get; set; }
        public DbSet<AccountingMoeinTafsilLevel> AccountingMoeinTafsilLevels { get; set; }
        public DbSet<AccountingMoeinTafsilRelation> AccountingMoeinTafsilRelations { get; set; }
        public DbSet<AccountingTafsilArticle> AccountingTafsilArticles { get; set; }
        public DbSet<AccountingTafsilLevel> AccountingTafsilLevels { get; set; }
        public DbSet<AccountingTafsillevelsDetail> AccountingTafsillevelsDetails { get; set; }
        public DbSet<AccountingTafsilStructureDefine> AccountingTafsilStructureDefines { get; set; }
        public DbSet<Asset> Assets { get; set; }
        public DbSet<AssetGood> AssetGoods { get; set; }
        public DbSet<BaseInfo> BaseInfoes { get; set; }
        public DbSet<Capital> Capitals { get; set; }
        public DbSet<CapitalDetail> CapitalDetails { get; set; }
        public DbSet<Check> Checks { get; set; }
        public DbSet<CheckProcess> CheckProcesses { get; set; }
        public DbSet<CodeTitle> CodeTitles { get; set; }
        public DbSet<Com> Coms { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<CompanyDetail> CompanyDetails { get; set; }
        public DbSet<CompanyStructureDefine> CompanyStructureDefines { get; set; }
        public DbSet<corporation> corporations { get; set; }
        public DbSet<FinancialMainYear> FinancialMainYears { get; set; }
        public DbSet<Financialyear> Financialyears { get; set; }
        public DbSet<Fund> Funds { get; set; }
        public DbSet<Goody> Goodies { get; set; }
        public DbSet<GoodiesGroup> GoodiesGroups { get; set; }
        public DbSet<GoodyConvertCountingUnit> GoodyConvertCountingUnits { get; set; }
        public DbSet<GoodyPriceList> GoodyPriceLists { get; set; }
        public DbSet<Operative> Operatives { get; set; }
        public DbSet<PayrollContract> PayrollContracts { get; set; }
        public DbSet<PayrollImprest> PayrollImprests { get; set; }
        public DbSet<PayrollInsuranceCode> PayrollInsuranceCodes { get; set; }
        public DbSet<PayrollInsuranceimmunity> PayrollInsuranceimmunities { get; set; }
        public DbSet<PayrollLoan> PayrollLoans { get; set; }
        public DbSet<PayrollLoanDetail> PayrollLoanDetails { get; set; }
        public DbSet<PayrollPerson> PayrollPersons { get; set; }
        public DbSet<PayrollPersonSentence> PayrollPersonSentences { get; set; }
        public DbSet<PayrollPersonWorkDone> PayrollPersonWorkDones { get; set; }
        public DbSet<PayrollSalaryFactor> PayrollSalaryFactors { get; set; }
        public DbSet<PayrollSentence> PayrollSentences { get; set; }
        public DbSet<PayrollTaxCode> PayrollTaxCodes { get; set; }
        public DbSet<PayrollTaximmunity> PayrollTaximmunities { get; set; }
        public DbSet<PayrollWorkDoneFactor> PayrollWorkDoneFactors { get; set; }
        public DbSet<PersonStructureDefine> PersonStructureDefines { get; set; }
        public DbSet<PriceList> PriceLists { get; set; }
        public DbSet<SOTax> SOTaxes { get; set; }
        public DbSet<StoreOperation> StoreOperations { get; set; }
        public DbSet<StoreOperative> StoreOperatives { get; set; }
        public DbSet<StoreOrder> StoreOrders { get; set; }
        public DbSet<StoreOrderDetail> StoreOrderDetails { get; set; }
        public DbSet<Store> StoreS { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Treasury> Treasuries { get; set; }
        public DbSet<TreasuryDetail> TreasuryDetails { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<AccountingMoeinDetailsView> AccountingMoeinDetailsViews { get; set; }
        public DbSet<AccountingTafsillevelsDetailView> AccountingTafsillevelsDetailViews { get; set; }
        public DbSet<AssetGoodsView> AssetGoodsViews { get; set; }
        public DbSet<CommodityDetailsView> CommodityDetailsViews { get; set; }
        public DbSet<FundView> FundViews { get; set; }
        public DbSet<PayrollFunction> PayrollFunctions { get; set; }
        public DbSet<SOTaxView> SOTaxViews { get; set; }
        public DbSet<StoreOrderView> StoreOrderViews { get; set; }
        public DbSet<TreasuryDetailsView> TreasuryDetailsViews { get; set; }
    
        public virtual int SHOWData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SHOWData");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
